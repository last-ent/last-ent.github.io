<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Last Ent's Thoughts</title><link>https://last-ent.com/</link><description>Thoughts as provided by Ent</description><atom:link href="https://last-ent.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:blog@last-ent.com"&gt;Ent&lt;/a&gt; </copyright><lastBuildDate>Fri, 20 Nov 2020 21:53:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>FP for Sceptics: Intuitive guide to map/flatmap</title><link>https://last-ent.com/posts/intuitive-map-flatmap/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;h2&gt;Backbone of Functional Programming&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;flatmap&lt;/code&gt; form the backbone of Functional Progamming. It is very important be comfortable with these two concepts and this guide will help you develop an intuition for them.&lt;/p&gt;
&lt;p&gt;This guide is language agnostic but I expect you to be familiar with basic programming concepts like functions, types, data type/objects and list. &lt;/p&gt;
&lt;h3&gt;Nomenclature&lt;/h3&gt;
&lt;p&gt;Let me introduce you to some basic terms we will be using to talk about &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;s are data constructs and they can be &lt;code&gt;Basic Types&lt;/code&gt; like Int, String etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt; is a special &lt;code&gt;type&lt;/code&gt; which contains another &lt;code&gt;type&lt;/code&gt;. For example a List of Ints.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&lt;/code&gt; is a function whose input is of Type 1 and output is of Type 2. Type 1 &amp;amp; Type 2 can be same type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visualize&lt;/h3&gt;
&lt;p&gt;Though I have defined three terms it will be easier to think about them visually.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Basic types&lt;/code&gt; (Int, String etc) will be represented by shapes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Basic Types" src="https://last-ent.com/images/fmap/basic-types.png"&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gumroad.com/js/gumroad.js"&gt;&lt;/script&gt;

&lt;/p&gt;&lt;hr&gt;
&lt;div class="center"&gt;
  &lt;b&gt;Would you like a free ebooklet?&lt;/b&gt;
  &lt;p&gt;
  &lt;a class="gumroad-button" href="https://gum.co/AWmOs" target="_blank"&gt;FP for Sceptics: Algebraic Data Types&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;code&gt;Containers&lt;/code&gt; will be represented by shapes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Empty Containers" src="https://last-ent.com/images/fmap/empty-containers.png"&gt;&lt;/p&gt;
&lt;p&gt;In reality, we will always use&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Container for a Type&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Square for Triangle" src="https://last-ent.com/images/fmap/full-containers.png"&gt;&lt;/p&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Functions&lt;/code&gt; will be denoted as&lt;/h4&gt;
&lt;p&gt;&lt;img alt="f : Triangle -&amp;gt; Star" src="https://last-ent.com/images/fmap/fun.png"&gt;&lt;/p&gt;
&lt;h3&gt;Verbalize&lt;/h3&gt;
&lt;p&gt;Let's see how to verbalize these terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Square for Triangle" src="https://last-ent.com/images/fmap/t-sq.png"&gt; Container for Triangle&lt;/p&gt;
&lt;p&gt;&lt;img alt="Square for Circle for Triangle" src="https://last-ent.com/images/fmap/t-crl-sq.png"&gt; Square for Circle for Triangle&lt;/p&gt;
&lt;p&gt;&lt;img alt="f : Triangle -&amp;gt; Star" src="https://last-ent.com/images/fmap/fun.png"&gt;  f is a function from Triangle to Star&lt;/p&gt;
&lt;p&gt;&lt;img alt="g : Triangle -&amp;gt; Square for Triangle" src="https://last-ent.com/images/fmap/g-fun.png"&gt; g is a function from Triangle to Container of Triangle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Fundamentals&lt;/h2&gt;
&lt;p&gt;In this section, I want to introduce one basic concept along with &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Function Composition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Function Composition&lt;/code&gt; is chaining two or more functions such that output of one function feeds into to the input of second function and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Derivation of g . f : Triangle to Container of Reverse Triangle" src="https://last-ent.com/images/fmap/gof-derive.png"&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;map&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; is a function that takes a Container (C1) &amp;amp; a Function (F) as input and returns a new Container (C2) for Function's (F) output type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Rules for &lt;code&gt;map&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Type contained by Container (C1) has to match Function's (F) input type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="map : (f : Triangle -&amp;gt; Reverse Triangle, Container for Triangle) -&amp;gt; Container for Reverse Triangle" src="https://last-ent.com/images/fmap/map.png"&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;flatmap&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;flatmap&lt;/code&gt; is a function that takes a Container (C1) &amp;amp; a Function (F) as input and returns a new Container (C2) for Function's (F) output type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Rules for &lt;code&gt;flatmap&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Type contained by Container (C1) has to match Function's (F) input type.&lt;/li&gt;
&lt;li&gt;Function (F) has to return a Container (C2)&lt;/li&gt;
&lt;li&gt;C1 == C2. This is very important to remember as many people trip up on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="flatmap : (f : Triangle -&amp;gt; Container for Reverse Triangle, Container for Triangle) -&amp;gt; Container for Reverse Triangle" src="https://last-ent.com/images/fmap/flatmap.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As you can see, both &lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;flatmap&lt;/code&gt; have the same written definition but the strictness is in the rules it has to adhere to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Exercise Problems&lt;/h2&gt;
&lt;p&gt;Let's conclude with a few exercise problems.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr&gt;
&lt;!-- Begin Mailchimp Signup Form --&gt;

&lt;div id="mc_embed_signup"&gt;
&lt;form action="https://last-ent.us8.list-manage.com/subscribe/post?u=32b025ec5a4ac94d7ca217830&amp;amp;id=eabef61e0c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
    &lt;div id="mc_embed_signup_scroll"&gt;
	&lt;label for="mce-EMAIL"&gt;Liked this and want more?&lt;/label&gt;
	&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_32b025ec5a4ac94d7ca217830_eabef61e0c" tabindex="-1" value=""&gt;&lt;/div&gt;
    &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;!--End mc_embed_signup--&gt;
&lt;hr&gt;
&lt;h3&gt;Problem Set: Map&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: Map" src="https://last-ent.com/images/fmap/map-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;

&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/t-sq.png" alt="Container for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/t-crl-sq.png" alt="Container for Circle for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;Breaks the rule for &lt;b&gt;map&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;&lt;b&gt;map&lt;/b&gt; works on a Container, not a Basic Type&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h3&gt;Problem Set: FLatMap&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: FlatMap" src="https://last-ent.com/images/fmap/flatmap-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol start="5"&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-5.png" alt="Container for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-6.png" alt="Container for Circle for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;Breaks the 2nd Rule for &lt;b&gt;flatmap&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h3&gt;Problem Set: Advanced FlatMap&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: Advanced FlatMap" src="https://last-ent.com/images/fmap/adv-flatmap-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol start="8"&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-8.png" alt="Triangle to Reverse Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-9.png" alt="Triangle to Container for Reverse Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-10.png" alt="Circle for Reverse Triangle to Square for Rev Triangle"&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;/details&gt;

&lt;p&gt;&lt;/p&gt;&lt;hr&gt;
&lt;!-- Begin Mailchimp Signup Form --&gt;

&lt;div id="mc_embed_signup"&gt;
&lt;form action="https://last-ent.us8.list-manage.com/subscribe/post?u=32b025ec5a4ac94d7ca217830&amp;amp;id=eabef61e0c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
    &lt;div id="mc_embed_signup_scroll"&gt;
	&lt;label for="mce-EMAIL"&gt;Liked this and want more?&lt;/label&gt;
	&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_32b025ec5a4ac94d7ca217830_eabef61e0c" tabindex="-1" value=""&gt;&lt;/div&gt;
    &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;!--End mc_embed_signup--&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope after going through this guide, you are more comfortable working with &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, have a look at the rest of my posts on FP (in Scala) - &lt;a href="https://last-ent.com/categories/fp-for-sceptics/"&gt;FP for Sceptics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gumroad.com/js/gumroad.js"&gt;&lt;/script&gt;

&lt;/p&gt;&lt;hr&gt;
&lt;div class="center"&gt;
  &lt;b&gt;Would you like a free ebooklet?&lt;/b&gt;
  &lt;p&gt;
  &lt;a class="gumroad-button" href="https://gum.co/AWmOs" target="_blank"&gt;FP for Sceptics: Algebraic Data Types&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;hr&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>software design</category><guid>https://last-ent.com/posts/intuitive-map-flatmap/</guid><pubDate>Thu, 19 Nov 2020 18:03:25 GMT</pubDate></item><item><title>My Favourite Evening Snack</title><link>https://last-ent.com/posts/my-favourite-evening-snack/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;I know what you are thinking&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;I thought this was a programming blog, wtc is this?&lt;/em&gt; &lt;strong&gt;But hear me out!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Few weeks ago I saw a video by Matt D'Avella where he was talking a quick healthy snack and the part showed him putting a few dried corn kernels into a small vessel and after a few minutes, popcorn ready.&lt;/p&gt;
&lt;p&gt;That intrigued me, to say the least.&lt;/p&gt;
&lt;p&gt;I gave it a try and &lt;code&gt;Yes, it's that simple&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Popcorn I made" src="https://last-ent.com/images/popcorn.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;A few things to keep in mind of course, so read on if it interests you.&lt;/p&gt;
&lt;h2&gt;Salted Popcorn&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Take a small iron pot. (Preferably with thich bottom)&lt;/li&gt;
&lt;li&gt;Add in some oil. (I used Olive Oil)&lt;/li&gt;
&lt;li&gt;Drop the kernels into the oil.&lt;/li&gt;
&lt;li&gt;Partially cover it with a lid.&lt;/li&gt;
&lt;li&gt;Wait for em to pop!&lt;/li&gt;
&lt;li&gt;Add in a bit salt (not too much!) and shake em around.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Movie Popcorn&lt;/h2&gt;
&lt;p&gt;Do you yearn for the popcorn we get at movies without the unhealthy side of it? Yes, &lt;em&gt;you can make it at home.&lt;/em&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Take a small iron pot. (Preferably with thich bottom)&lt;/li&gt;
&lt;li&gt;Add in clarified butter. (Not normal butter)
3-6. Same as before.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Things to know&lt;/h2&gt;
&lt;h3&gt;Why to partially cover the lid?&lt;/h3&gt;
&lt;p&gt;The kernels have some amount of moisture in them. By partially opening the lid, you let the water vapour out getting them crunchy.&lt;/p&gt;
&lt;p&gt;Also the reason the kernels pop is because the moisture inside the kernels get super heated and need to vent out.&lt;/p&gt;
&lt;h3&gt;Why not normal butter?&lt;/h3&gt;
&lt;p&gt;If you heat normal butter for long, it starts burning. This is because of milk residue in the butter.&lt;/p&gt;
&lt;p&gt;Also it has moisture in it causing popcorn to get soggy.&lt;/p&gt;
&lt;h3&gt;Don't use too much Oil!&lt;/h3&gt;
&lt;p&gt;If you add in too much oil, there is a chance the popcorn will get soggy (that was my experience).&lt;/p&gt;
&lt;p&gt;Also the popcorn will smell &amp;amp; taste lot more of the oil used. While I love me some Olive Oil, too much on my popcorn feels weird.&lt;/p&gt;
&lt;h3&gt;Variation on Cooking Style&lt;/h3&gt;
&lt;p&gt;One variation I read online is to wait until the oil heats up sufficiently before putting in the kernels.&lt;/p&gt;
&lt;p&gt;How do you know when the oil is ready? Put in a kernel or two at the start and wait for both of them to pop before you put in the rest.&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;So there you have it folks!&lt;/p&gt;
&lt;p&gt;That's how I am now addicted to my evening popcorn.&lt;/p&gt;&lt;/div&gt;</description><category>food</category><category>off-topic</category><guid>https://last-ent.com/posts/my-favourite-evening-snack/</guid><pubDate>Mon, 09 Nov 2020 19:42:42 GMT</pubDate></item><item><title>Ent's snappy guide to Emacs</title><link>https://last-ent.com/posts/emacs-snappy-intro/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/emacs/entmacs.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have used many editors over time and one "System" that I really enjoyed was Emacs. However I did not understand how it worked under the hood and it led to some fun times. This post is an attempt to log my experience with learning and understanding the "missing bits" in a single place. &lt;/p&gt;
&lt;p&gt;This guide is consolidation of knowledge &amp;amp; experience of 2-3 days of intense focus learning &amp;amp; modifying Emacs.&lt;/p&gt;
&lt;h3&gt;Purpose&lt;/h3&gt;
&lt;p&gt;The aim of this guide is to quickly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstrap your understanding to a level where you can start thinking in terms Emacs' terminology and use that knowledge to searching the internet for new questions you might have. &lt;/li&gt;
&lt;li&gt;Develop a rudimentary understanding of how to customize Emacs. &lt;/li&gt;
&lt;li&gt;Setup an aesthically pleasing UI with usable setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This guide IS NOT about the basics of text editors like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are text editors? What is Emacs or Vim?&lt;/li&gt;
&lt;li&gt;Which editor should I use?&lt;/li&gt;
&lt;li&gt;How to navigate using either editor?&lt;/li&gt;
&lt;li&gt;How to read/write &lt;code&gt;elisp&lt;/code&gt;. I have a basic understanding of lisp/clojure but otherwise I haven't bothered with learning it for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/emacs-snappy-intro/"&gt;Read moreâ¦&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>learnings</category><guid>https://last-ent.com/posts/emacs-snappy-intro/</guid><pubDate>Sat, 07 Nov 2020 00:46:50 GMT</pubDate></item><item><title>Second Static Website</title><link>https://last-ent.com/posts/second-static-website/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;h2&gt;Static Website Hosting&lt;/h2&gt;
&lt;p&gt;I really like the low footprint and utility of Static Websites. This website is built using &lt;code&gt;Nikola&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will talk about some issues I faced with deploying a second static website and how I eventually solved it.&lt;/p&gt;
&lt;h3&gt;Github Pages&lt;/h3&gt;
&lt;p&gt;I have long enjoyed the awesomeness of &lt;code&gt;User Github Pages&lt;/code&gt; and am quite happy with it.&lt;/p&gt;
&lt;p&gt;However as soon as I tried to create a second independent static website with custom domain, &lt;code&gt;Github&lt;/code&gt; was having nothing of it.&lt;/p&gt;
&lt;p&gt;After spending lot of time scouring the web for how to make it work between &lt;code&gt;Github&lt;/code&gt; &amp;amp; &lt;code&gt;Namecheap&lt;/code&gt;, my DNS provider, I had nothing to show for it.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/second-static-website/"&gt;Read moreâ¦&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>off-topic</category><guid>https://last-ent.com/posts/second-static-website/</guid><pubDate>Tue, 03 Nov 2020 22:56:24 GMT</pubDate></item><item><title>Dependency Mock Server &amp; Black Friday Preparation</title><link>https://last-ent.com/posts/dependency-mock-server/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Last year while preparing for Black Friday our team had an interesting challenge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of our downstream services&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/dependency-mock-server/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt; had proper setup to provide environments/APIs to load test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This meant will have to configure our systems based on hopeful estimates based on last minute estimates and until then, we would could only sit idle. This wasn't appealing for obvious reasons of doing a hackjob and having a firefighting mode during Black Friday/Cyber Week.&lt;/p&gt;
&lt;h2&gt;Proposed Solution: Dependency Mock Server&lt;/h2&gt;
&lt;p&gt;The solution I came up with and which we used was to have a Mock Server that served endpoints similar to our dependencies and return dynamic responses based on request payload.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Server with Three Dependencies" src="https://last-ent.com/images/server-3-deps.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/dependency-mock-server/"&gt;Read moreâ¦&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software architecture</category><category>software design</category><guid>https://last-ent.com/posts/dependency-mock-server/</guid><pubDate>Sat, 19 Sep 2020 21:34:47 GMT</pubDate></item><item><title>OT: Mapping thoughts, Memex &amp; Zettelkasten.</title><link>https://last-ent.com/posts/mapping-thoughts/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://last-ent.com/posts/introducing-off-topic"&gt;Off Topic&lt;/a&gt; are posts where I talk about the human side of things.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Vannevar Bush, &lt;code&gt;As We May Think&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Have you read Vannevar Bush's article &lt;code&gt;As We May Think&lt;/code&gt;? In that article he discusses an interesting concept:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"A System becoming an extension of human knowledge and memory which &lt;code&gt;may be consulted with exceeding speed and flexibility&lt;/code&gt;."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now this might not seem groundbreaking to us for we have Computers, Internet and Search Engines (Google, DDG, etc.). However it's important to know that Hypertext, which is the backbone of internet, was created thanks to the inspiration taken from &lt;em&gt;Memex&lt;/em&gt;, which is the name of the system Bush proposed. &lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/mapping-thoughts/"&gt;Read moreâ¦&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>off-topic</category><guid>https://last-ent.com/posts/mapping-thoughts/</guid><pubDate>Sun, 09 Aug 2020 16:30:00 GMT</pubDate></item><item><title>Introducing Off Topic</title><link>https://last-ent.com/posts/introducing-off-topic/</link><dc:creator>Ent</dc:creator><description>&lt;pre class="code literal-block"&gt;I miss the days of yore,
where blogs had focus broad.
A mix of hobbies or talents varied,
a window into a person's psyche.

A journal of sorts where they write,
of things that spark their interests and delights.
Then came the internet of modern times,
that asked of everything, to be commercialized.

I protest, I detest,
this utilitarian web.
`Off Topic` is where,
I break this thread.
&lt;/pre&gt;</description><category>off-topic</category><guid>https://last-ent.com/posts/introducing-off-topic/</guid><pubDate>Sun, 09 Aug 2020 16:00:10 GMT</pubDate></item><item><title>Visual guide to polling in Functional Programming (Scala)</title><link>https://last-ent.com/posts/polling-in-fp/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/poll-st-3.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In this post, let's look at how to poll a system using a Stream.&lt;/p&gt;
&lt;p&gt;To make it easier/interesting, I will explain it using a visual approach.&lt;/p&gt;
&lt;p&gt;Let's use the following problem statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have API for a queue&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/polling-in-fp/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt; that can be queried using &lt;code&gt;pollFn&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;We need to process data returned by queue using &lt;code&gt;process&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;There may or may not be data at the time of querying.
&lt;p&gt;&lt;a href="https://last-ent.com/posts/polling-in-fp/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;</description><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/polling-in-fp/</guid><pubDate>Sun, 26 Jul 2020 15:55:41 GMT</pubDate></item><item><title>FP for Sceptics: Option Type in Practice</title><link>https://last-ent.com/posts/option-type-in-practice/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;previous post&lt;/a&gt; we defined FP &amp;amp; error handling&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;FP promotes using types for error handling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Previous post also explained &lt;code&gt;Option&lt;/code&gt; type and how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://last-ent.com/posts/adts-in-practice/"&gt;ADTs in Practice&lt;/a&gt; took a practical system&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/option-type-in-practice/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and designed ADTs for it.&lt;/p&gt;
&lt;p&gt;In this post, we will reuse the same system but try to figure out where &lt;code&gt;Option&lt;/code&gt; type makes most sense to use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Option Type: Where to use it?" src="https://last-ent.com/images/option-practice-title.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/option-type-in-practice/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/option-type-in-practice/</guid><pubDate>Mon, 29 Jun 2020 16:00:00 GMT</pubDate></item><item><title>FP for Sceptics: Introduction to Option Type</title><link>https://last-ent.com/posts/introduction-to-option-type/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/introduction-to-option-type/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We first implement "Happy Path" and then implement handlers for "Unhappy Path" (error handling). In &lt;a href="https://last-ent.com/posts/adts-in-practice"&gt;&lt;code&gt;ADTs in Practice&lt;/code&gt;&lt;/a&gt; we used "Exceptions" (&lt;code&gt;IO.raiseError&lt;/code&gt;) for error handling.&lt;/p&gt;
&lt;p&gt;However FP promotes using types for error handling, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post we will start by looking at the simplest of these:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; type denotes presence (&lt;code&gt;Some(value)&lt;/code&gt;) or absence (&lt;code&gt;None&lt;/code&gt;) of a value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Option has Some(value) &amp;amp; None. What are two ways of using it?" src="https://last-ent.com/images/option_title.png"&gt;

&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/introduction-to-option-type/</guid><pubDate>Sun, 31 May 2020 22:38:34 GMT</pubDate></item></channel></rss>