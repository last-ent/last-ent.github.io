<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Last Ent's Thoughts</title><link>https://last-ent.com/</link><description>Thoughts as provided by Ent</description><atom:link href="https://last-ent.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2022 &lt;a href="mailto:blog@last-ent.com"&gt;Ent&lt;/a&gt; </copyright><lastBuildDate>Mon, 17 Oct 2022 15:57:33 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Monte Carlo Method</title><link>https://last-ent.com/posts/monte-carlo-method/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In this essay I will talk about a term you might've come across when reading scientific literature or research papers. Idea is to develop gut feeling (intuition) for what the text is saying when &lt;strong&gt;Monte Carlo Method&lt;/strong&gt; is mentioned.&lt;/p&gt;
&lt;h2&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Monte Carlo Method (MCm)&lt;/strong&gt; builds on top of other topics and concepts, taking time to understand them will make learning about &lt;strong&gt;MCm&lt;/strong&gt; quite easy.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Randomness in computers&lt;/li&gt;
&lt;li&gt;Law of Large Numbers&lt;/li&gt;
&lt;li&gt;System or Process Model&lt;/li&gt;
&lt;li&gt;Probability Distribution (Function)&lt;/li&gt;
&lt;li&gt;Deterministic Computation (Function)&lt;/li&gt;
&lt;li&gt;Markov Chain&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/monte-carlo-method/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>Computer Science</category><category>Probability</category><guid>https://last-ent.com/posts/monte-carlo-method/</guid><pubDate>Wed, 03 Feb 2021 21:51:04 GMT</pubDate></item><item><title>Link Preview &amp; Open Graph Protocol</title><link>https://last-ent.com/posts/link-preview-open-graph-protocol/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/ogp-logo.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;Notice how on posting a link on some sites or some messenger apps, a link preview shows up?&lt;/p&gt;
&lt;p&gt;One might think the site/app crawls the webpage for this information but that's not the case. There is lot more interesting tech at play here.&lt;/p&gt;
&lt;p&gt;Simply put&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Open Graph Protocol&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's take a deeper look and answer three questions&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What is Open Graph Protocol?&lt;/li&gt;
&lt;li&gt;How can I create custom link previews?&lt;/li&gt;
&lt;li&gt;Can I create dynamic link previews?&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/link-preview-open-graph-protocol/"&gt;Read more…&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software architecture</category><guid>https://last-ent.com/posts/link-preview-open-graph-protocol/</guid><pubDate>Tue, 19 Jan 2021 19:00:45 GMT</pubDate></item><item><title>FP for Sceptics: Intuitive guide to map/flatmap</title><link>https://last-ent.com/posts/intuitive-map-flatmap/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/fmap/map.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;h2&gt;Backbone of Functional Programming&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;flatmap&lt;/code&gt; form the backbone of Functional Progamming. It is very important be comfortable with these two concepts and this guide will help you develop an intuition for them.&lt;/p&gt;
&lt;p&gt;This guide is language agnostic but I expect you to be familiar with basic programming concepts like functions, types, data type/objects and list. &lt;/p&gt;
&lt;h3&gt;Nomenclature&lt;/h3&gt;
&lt;p&gt;Let me introduce you to some basic terms we will be using to talk about &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;s are data constructs and they can be &lt;code&gt;Basic Types&lt;/code&gt; like Int, String etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt; is a special &lt;code&gt;type&lt;/code&gt; which contains another &lt;code&gt;type&lt;/code&gt;. For example a List of Ints.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&lt;/code&gt; is a function whose input is of Type 1 and output is of Type 2. Type 1 &amp;amp; Type 2 can be same type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visualize&lt;/h3&gt;
&lt;p&gt;Though I have defined three terms it will be easier to think about them visually.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Basic types&lt;/code&gt; (Int, String etc) will be represented by shapes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Basic Types" src="https://last-ent.com/images/fmap/basic-types.png"&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/intuitive-map-flatmap/"&gt;Read more…&lt;/a&gt; (9 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>software design</category><guid>https://last-ent.com/posts/intuitive-map-flatmap/</guid><pubDate>Thu, 19 Nov 2020 18:03:25 GMT</pubDate></item><item><title>Ent's snappy guide to Emacs</title><link>https://last-ent.com/posts/emacs-snappy-intro/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/emacs/entmacs.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;h2&gt;Introduction&lt;/h2&gt;
&lt;p&gt;I have used many editors over time and one "System" that I really enjoyed was Emacs. However I did not understand how it worked under the hood and it led to some fun times. This post is an attempt to log my experience with learning and understanding the "missing bits" in a single place. &lt;/p&gt;
&lt;p&gt;This guide is consolidation of knowledge &amp;amp; experience of 2-3 days of intense focus learning &amp;amp; modifying Emacs.&lt;/p&gt;
&lt;h3&gt;Purpose&lt;/h3&gt;
&lt;p&gt;The aim of this guide is to quickly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Bootstrap your understanding to a level where you can start thinking in terms Emacs' terminology and use that knowledge to searching the internet for new questions you might have. &lt;/li&gt;
&lt;li&gt;Develop a rudimentary understanding of how to customize Emacs. &lt;/li&gt;
&lt;li&gt;Setup an aesthically pleasing UI with usable setup.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This guide IS NOT about the basics of text editors like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;What are text editors? What is Emacs or Vim?&lt;/li&gt;
&lt;li&gt;Which editor should I use?&lt;/li&gt;
&lt;li&gt;How to navigate using either editor?&lt;/li&gt;
&lt;li&gt;How to read/write &lt;code&gt;elisp&lt;/code&gt;. I have a basic understanding of lisp/clojure but otherwise I haven't bothered with learning it for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/emacs-snappy-intro/"&gt;Read more…&lt;/a&gt; (20 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>emacs</category><category>learnings</category><guid>https://last-ent.com/posts/emacs-snappy-intro/</guid><pubDate>Sat, 07 Nov 2020 00:46:50 GMT</pubDate></item><item><title>Second Static Website</title><link>https://last-ent.com/posts/second-static-website/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;h2&gt;Static Website Hosting&lt;/h2&gt;
&lt;p&gt;I really like the low footprint and utility of Static Websites. This website is built using &lt;code&gt;Nikola&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In this post I will talk about some issues I faced with deploying a second static website and how I eventually solved it.&lt;/p&gt;
&lt;h3&gt;Github Pages&lt;/h3&gt;
&lt;p&gt;I have long enjoyed the awesomeness of &lt;code&gt;User Github Pages&lt;/code&gt; and am quite happy with it.&lt;/p&gt;
&lt;p&gt;However as soon as I tried to create a second independent static website with custom domain, &lt;code&gt;Github&lt;/code&gt; was having nothing of it.&lt;/p&gt;
&lt;p&gt;After spending lot of time scouring the web for how to make it work between &lt;code&gt;Github&lt;/code&gt; &amp;amp; &lt;code&gt;Namecheap&lt;/code&gt;, my DNS provider, I had nothing to show for it.&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/second-static-website/"&gt;Read more…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>off-topic</category><guid>https://last-ent.com/posts/second-static-website/</guid><pubDate>Tue, 03 Nov 2020 22:56:24 GMT</pubDate></item><item><title>Dependency Mock Server &amp; Black Friday Preparation</title><link>https://last-ent.com/posts/dependency-mock-server/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Last year while preparing for Black Friday our team had an interesting challenge:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Some of our downstream services&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/dependency-mock-server/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt; had proper setup to provide environments/APIs to load test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This meant will have to configure our systems based on hopeful estimates based on last minute estimates and until then, we would could only sit idle. This wasn't appealing for obvious reasons of doing a hackjob and having a firefighting mode during Black Friday/Cyber Week.&lt;/p&gt;
&lt;h2&gt;Proposed Solution: Dependency Mock Server&lt;/h2&gt;
&lt;p&gt;The solution I came up with and which we used was to have a Mock Server that served endpoints similar to our dependencies and return dynamic responses based on request payload.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Server with Three Dependencies" src="https://last-ent.com/images/server-3-deps.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/dependency-mock-server/"&gt;Read more…&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>software architecture</category><category>software design</category><guid>https://last-ent.com/posts/dependency-mock-server/</guid><pubDate>Sat, 19 Sep 2020 21:34:47 GMT</pubDate></item><item><title>OT: Mapping thoughts, Memex &amp; Zettelkasten.</title><link>https://last-ent.com/posts/mapping-thoughts/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;em&gt;&lt;a href="https://last-ent.com/posts/introducing-off-topic"&gt;Off Topic&lt;/a&gt; are posts where I talk about the human side of things.&lt;/em&gt;&lt;/p&gt;
&lt;h2&gt;Vannevar Bush, &lt;code&gt;As We May Think&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;Have you read Vannevar Bush's article &lt;code&gt;As We May Think&lt;/code&gt;? In that article he discusses an interesting concept:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"A System becoming an extension of human knowledge and memory which &lt;code&gt;may be consulted with exceeding speed and flexibility&lt;/code&gt;."&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now this might not seem groundbreaking to us for we have Computers, Internet and Search Engines (Google, DDG, etc.). However it's important to know that Hypertext, which is the backbone of internet, was created thanks to the inspiration taken from &lt;em&gt;Memex&lt;/em&gt;, which is the name of the system Bush proposed. &lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/mapping-thoughts/"&gt;Read more…&lt;/a&gt; (2 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>off-topic</category><guid>https://last-ent.com/posts/mapping-thoughts/</guid><pubDate>Sun, 09 Aug 2020 16:30:00 GMT</pubDate></item><item><title>Visual guide to polling in Functional Programming (Scala)</title><link>https://last-ent.com/posts/polling-in-fp/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/poll-st-3.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;p&gt;In this post, let's look at how to poll a system using a Stream.&lt;/p&gt;
&lt;p&gt;To make it easier/interesting, I will explain it using a visual approach.&lt;/p&gt;
&lt;p&gt;Let's use the following problem statement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We have API for a queue&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/polling-in-fp/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt; that can be queried using &lt;code&gt;pollFn&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;We need to process data returned by queue using &lt;code&gt;process&lt;/code&gt; function.&lt;/li&gt;
&lt;li&gt;There may or may not be data at the time of querying.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="https://last-ent.com/posts/polling-in-fp/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/polling-in-fp/</guid><pubDate>Sun, 26 Jul 2020 15:55:41 GMT</pubDate></item><item><title>FP for Sceptics: Option Type in Practice</title><link>https://last-ent.com/posts/option-type-in-practice/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;previous post&lt;/a&gt; we defined FP &amp;amp; error handling&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;FP promotes using types for error handling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Previous post also explained &lt;code&gt;Option&lt;/code&gt; type and how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://last-ent.com/posts/adts-in-practice/"&gt;ADTs in Practice&lt;/a&gt; took a practical system&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/option-type-in-practice/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and designed ADTs for it.&lt;/p&gt;
&lt;p&gt;In this post, we will reuse the same system but try to figure out where &lt;code&gt;Option&lt;/code&gt; type makes most sense to use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Option Type: Where to use it?" src="https://last-ent.com/images/option-practice-title.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/option-type-in-practice/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/option-type-in-practice/</guid><pubDate>Mon, 29 Jun 2020 16:00:00 GMT</pubDate></item><item><title>FP for Sceptics: Introduction to Option Type</title><link>https://last-ent.com/posts/introduction-to-option-type/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/introduction-to-option-type/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We first implement "Happy Path" and then implement handlers for "Unhappy Path" (error handling). In &lt;a href="https://last-ent.com/posts/adts-in-practice"&gt;&lt;code&gt;ADTs in Practice&lt;/code&gt;&lt;/a&gt; we used "Exceptions" (&lt;code&gt;IO.raiseError&lt;/code&gt;) for error handling.&lt;/p&gt;
&lt;p&gt;However FP promotes using types for error handling, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post we will start by looking at the simplest of these:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; type denotes presence (&lt;code&gt;Some(value)&lt;/code&gt;) or absence (&lt;code&gt;None&lt;/code&gt;) of a value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Option has Some(value) &amp;amp; None. What are two ways of using it?" src="https://last-ent.com/images/option_title.png"&gt;

&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;Read more…&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/introduction-to-option-type/</guid><pubDate>Sun, 31 May 2020 22:38:34 GMT</pubDate></item></channel></rss>