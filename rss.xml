<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Last Ent's Thoughts</title><link>https://last-ent.com/</link><description>Thoughts as provided by Ent</description><atom:link href="https://last-ent.com/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:last_ent@outlook.com"&gt;Ent&lt;/a&gt; </copyright><lastBuildDate>Mon, 12 Aug 2019 19:11:29 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Cats Effect's IO</title><link>https://last-ent.com/posts/cats-effects-io/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Cats Effect's Fibers/IOs run on a thread pool created over VM. They are essentially Green Threads that are created over the thread pool. Unlike async frameworks, IO.flatmaps does not include _asynchronous boundary. This means that essentially all of nested flatmaps are run within a single fiber. IO has mechanism to introduce asynchronous boundary but this has to be done manually by the developer via IO.shift. Operations such as race, parMapN or parTraverse inherently introduce asynchronous boundary.&lt;/p&gt;
&lt;p&gt;~ 14th May, 22:11&lt;/p&gt;&lt;/div&gt;</description><category>programming</category><category>scala</category><guid>https://last-ent.com/posts/cats-effects-io/</guid><pubDate>Mon, 12 Aug 2019 18:44:38 GMT</pubDate></item><item><title>Companies &amp; Devs want different things</title><link>https://last-ent.com/posts/companies-devs-want-different-things/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Companies are interested in keeping the risk of their operations to a minimum.
Software Developers want to learn and hone their craft. (This is not true for all developers and I don't speak for them.)&lt;/p&gt;
&lt;p&gt;These two motivations don't align well with each other. Learning requies failure and unpredicability; Neither of which is good for company.
Also, if you have employees who like to learn and experiment, they are more likely to innovate.
The knee jerk reaction to this might be, "Yes! We WANT our employees to innovate!" But the reality is that not all innovation is good.
More often than not, innovation can lead to creating silos and requiring special skills for developers to operate the tools.
Tools that are unique and idosyncratic. This is not in company's best interest, because they want the cogs (Developers) in their machine
to be replaceable. This is not malicious intent on the company's part, it just means that in case you want to leave the job for greener pastures
then the company shouldn't get crippled and be able to move on and work efficently.&lt;/p&gt;
&lt;p&gt;~ 5th May, 2AM &amp;amp; 11:30 AM&lt;/p&gt;&lt;/div&gt;</description><category>musings</category><category>programming</category><guid>https://last-ent.com/posts/companies-devs-want-different-things/</guid><pubDate>Mon, 12 Aug 2019 18:29:19 GMT</pubDate></item><item><title>Thoughts on changing programming languages</title><link>https://last-ent.com/posts/thoughts-on-changing-programming-languages/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In general people like to say that one should not be bound to any particular language
and instead should be able to switch languages as and when required. However it is also
common to see that programmers, especially those with many years of experience, loathe
this concept.&lt;/p&gt;
&lt;p&gt;We tend to dismiss this by saying that they are set in their ways and that they are being stubborn
&amp;amp; don't want to make the effort. However that might not be true in all cases, what a younger developer
tends to not understand is that a veteran developer has spent an insurmountable amount of time understanding
and mastering their craft. They have gained command over their tools of trade that allows them to bend the world
to their will. Indeed it is a frightening thought to ask someone to abandon their previous knowledge and start from
the beginning because they will always be conscious of the vast disparity between their skills of the old and the
skill level they have now.&lt;/p&gt;
&lt;p&gt;To a developer who still hasn't learned more than a few techniques, this is of little consequence.
However, this becomes a very painful handicap for those who lose a lot by making such a transition.&lt;/p&gt;
&lt;p&gt;~ 5th May, 1:25AM&lt;/p&gt;&lt;/div&gt;</description><category>musings</category><category>programming</category><guid>https://last-ent.com/posts/thoughts-on-changing-programming-languages/</guid><pubDate>Mon, 12 Aug 2019 18:21:48 GMT</pubDate></item></channel></rss>