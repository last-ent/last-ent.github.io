<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Last Ent's Thoughts (Posts about FP for sceptics)</title><link>https://last-ent.com/</link><description></description><atom:link href="https://last-ent.com/categories/fp-for-sceptics.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2020 &lt;a href="mailto:blog@last-ent.com"&gt;Ent&lt;/a&gt; </copyright><lastBuildDate>Fri, 20 Nov 2020 21:53:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>FP for Sceptics: Intuitive guide to map/flatmap</title><link>https://last-ent.com/posts/intuitive-map-flatmap/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;h2&gt;Backbone of Functional Programming&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;flatmap&lt;/code&gt; form the backbone of Functional Progamming. It is very important be comfortable with these two concepts and this guide will help you develop an intuition for them.&lt;/p&gt;
&lt;p&gt;This guide is language agnostic but I expect you to be familiar with basic programming concepts like functions, types, data type/objects and list. &lt;/p&gt;
&lt;h3&gt;Nomenclature&lt;/h3&gt;
&lt;p&gt;Let me introduce you to some basic terms we will be using to talk about &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Type&lt;/code&gt;s are data constructs and they can be &lt;code&gt;Basic Types&lt;/code&gt; like Int, String etc.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Container&lt;/code&gt; is a special &lt;code&gt;type&lt;/code&gt; which contains another &lt;code&gt;type&lt;/code&gt;. For example a List of Ints.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Function&lt;/code&gt; is a function whose input is of Type 1 and output is of Type 2. Type 1 &amp;amp; Type 2 can be same type.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Visualize&lt;/h3&gt;
&lt;p&gt;Though I have defined three terms it will be easier to think about them visually.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Basic types&lt;/code&gt; (Int, String etc) will be represented by shapes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Basic Types" src="https://last-ent.com/images/fmap/basic-types.png"&gt;.&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gumroad.com/js/gumroad.js"&gt;&lt;/script&gt;

&lt;/p&gt;&lt;hr&gt;
&lt;div class="center"&gt;
  &lt;b&gt;Would you like a free ebooklet?&lt;/b&gt;
  &lt;p&gt;
  &lt;a class="gumroad-button" href="https://gum.co/AWmOs" target="_blank"&gt;FP for Sceptics: Algebraic Data Types&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;code&gt;Containers&lt;/code&gt; will be represented by shapes&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Empty Containers" src="https://last-ent.com/images/fmap/empty-containers.png"&gt;&lt;/p&gt;
&lt;p&gt;In reality, we will always use&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Container for a Type&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;&lt;img alt="Square for Triangle" src="https://last-ent.com/images/fmap/full-containers.png"&gt;&lt;/p&gt;
&lt;p&gt;etc.&lt;/p&gt;
&lt;h4&gt;&lt;code&gt;Functions&lt;/code&gt; will be denoted as&lt;/h4&gt;
&lt;p&gt;&lt;img alt="f : Triangle -&amp;gt; Star" src="https://last-ent.com/images/fmap/fun.png"&gt;&lt;/p&gt;
&lt;h3&gt;Verbalize&lt;/h3&gt;
&lt;p&gt;Let's see how to verbalize these terms:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;img alt="Square for Triangle" src="https://last-ent.com/images/fmap/t-sq.png"&gt; Container for Triangle&lt;/p&gt;
&lt;p&gt;&lt;img alt="Square for Circle for Triangle" src="https://last-ent.com/images/fmap/t-crl-sq.png"&gt; Square for Circle for Triangle&lt;/p&gt;
&lt;p&gt;&lt;img alt="f : Triangle -&amp;gt; Star" src="https://last-ent.com/images/fmap/fun.png"&gt;  f is a function from Triangle to Star&lt;/p&gt;
&lt;p&gt;&lt;img alt="g : Triangle -&amp;gt; Square for Triangle" src="https://last-ent.com/images/fmap/g-fun.png"&gt; g is a function from Triangle to Container of Triangle&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Fundamentals&lt;/h2&gt;
&lt;p&gt;In this section, I want to introduce one basic concept along with &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Function Composition&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Function Composition&lt;/code&gt; is chaining two or more functions such that output of one function feeds into to the input of second function and so on.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Derivation of g . f : Triangle to Container of Reverse Triangle" src="https://last-ent.com/images/fmap/gof-derive.png"&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;map&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;map&lt;/code&gt; is a function that takes a Container (C1) &amp;amp; a Function (F) as input and returns a new Container (C2) for Function's (F) output type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Rules for &lt;code&gt;map&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Type contained by Container (C1) has to match Function's (F) input type.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="map : (f : Triangle -&amp;gt; Reverse Triangle, Container for Triangle) -&amp;gt; Container for Reverse Triangle" src="https://last-ent.com/images/fmap/map.png"&gt;&lt;/p&gt;
&lt;h3&gt;&lt;code&gt;flatmap&lt;/code&gt;&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;flatmap&lt;/code&gt; is a function that takes a Container (C1) &amp;amp; a Function (F) as input and returns a new Container (C2) for Function's (F) output type.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Rules for &lt;code&gt;flatmap&lt;/code&gt;&lt;/h4&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Type contained by Container (C1) has to match Function's (F) input type.&lt;/li&gt;
&lt;li&gt;Function (F) has to return a Container (C2)&lt;/li&gt;
&lt;li&gt;C1 == C2. This is very important to remember as many people trip up on this.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="flatmap : (f : Triangle -&amp;gt; Container for Reverse Triangle, Container for Triangle) -&amp;gt; Container for Reverse Triangle" src="https://last-ent.com/images/fmap/flatmap.png"&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: As you can see, both &lt;code&gt;map&lt;/code&gt; &amp;amp; &lt;code&gt;flatmap&lt;/code&gt; have the same written definition but the strictness is in the rules it has to adhere to.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Exercise Problems&lt;/h2&gt;
&lt;p&gt;Let's conclude with a few exercise problems.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;hr&gt;
&lt;!-- Begin Mailchimp Signup Form --&gt;

&lt;div id="mc_embed_signup"&gt;
&lt;form action="https://last-ent.us8.list-manage.com/subscribe/post?u=32b025ec5a4ac94d7ca217830&amp;amp;id=eabef61e0c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
    &lt;div id="mc_embed_signup_scroll"&gt;
	&lt;label for="mce-EMAIL"&gt;Liked this and want more?&lt;/label&gt;
	&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_32b025ec5a4ac94d7ca217830_eabef61e0c" tabindex="-1" value=""&gt;&lt;/div&gt;
    &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;!--End mc_embed_signup--&gt;
&lt;hr&gt;
&lt;h3&gt;Problem Set: Map&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: Map" src="https://last-ent.com/images/fmap/map-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;

&lt;/p&gt;&lt;ol&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/t-sq.png" alt="Container for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/t-crl-sq.png" alt="Container for Circle for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;Breaks the rule for &lt;b&gt;map&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;&lt;b&gt;map&lt;/b&gt; works on a Container, not a Basic Type&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h3&gt;Problem Set: FLatMap&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: FlatMap" src="https://last-ent.com/images/fmap/flatmap-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol start="5"&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-5.png" alt="Container for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-6.png" alt="Container for Circle for Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;b&gt;Error!&lt;/b&gt; &lt;i&gt;Breaks the 2nd Rule for &lt;b&gt;flatmap&lt;/b&gt;&lt;/i&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;

&lt;hr&gt;
&lt;h3&gt;Problem Set: Advanced FlatMap&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Problem Set: Advanced FlatMap" src="https://last-ent.com/images/fmap/adv-flatmap-problems.png"&gt;&lt;/p&gt;
&lt;details&gt;&lt;summary&gt;&lt;b&gt;Solutions&lt;/b&gt;&lt;/summary&gt;&lt;p&gt;
&lt;/p&gt;&lt;ol start="8"&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-8.png" alt="Triangle to Reverse Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-9.png" alt="Triangle to Container for Reverse Triangle"&gt; &lt;/li&gt;
    &lt;li&gt; &lt;img src="https://last-ent.com/images/fmap/soln-10.png" alt="Circle for Reverse Triangle to Square for Rev Triangle"&gt; &lt;/li&gt;
&lt;/ol&gt;

&lt;/details&gt;

&lt;p&gt;&lt;/p&gt;&lt;hr&gt;
&lt;!-- Begin Mailchimp Signup Form --&gt;

&lt;div id="mc_embed_signup"&gt;
&lt;form action="https://last-ent.us8.list-manage.com/subscribe/post?u=32b025ec5a4ac94d7ca217830&amp;amp;id=eabef61e0c" method="post" id="mc-embedded-subscribe-form" name="mc-embedded-subscribe-form" class="validate" target="_blank" novalidate&gt;
    &lt;div id="mc_embed_signup_scroll"&gt;
	&lt;label for="mce-EMAIL"&gt;Liked this and want more?&lt;/label&gt;
	&lt;input type="email" value="" name="EMAIL" class="email" id="mce-EMAIL" placeholder="email address" required&gt;
    &lt;!-- real people should not fill this in and expect good things - do not remove this or risk form bot signups--&gt;
    &lt;div style="position: absolute; left: -5000px;" aria-hidden="true"&gt;&lt;input type="text" name="b_32b025ec5a4ac94d7ca217830_eabef61e0c" tabindex="-1" value=""&gt;&lt;/div&gt;
    &lt;div class="clear"&gt;&lt;input type="submit" value="Subscribe" name="subscribe" id="mc-embedded-subscribe" class="button"&gt;&lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
&lt;/div&gt;

&lt;!--End mc_embed_signup--&gt;
&lt;hr&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I hope after going through this guide, you are more comfortable working with &lt;code&gt;map/flatmap&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you liked this guide, have a look at the rest of my posts on FP (in Scala) - &lt;a href="https://last-ent.com/categories/fp-for-sceptics/"&gt;FP for Sceptics&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;script src="https://gumroad.com/js/gumroad.js"&gt;&lt;/script&gt;

&lt;/p&gt;&lt;hr&gt;
&lt;div class="center"&gt;
  &lt;b&gt;Would you like a free ebooklet?&lt;/b&gt;
  &lt;p&gt;
  &lt;a class="gumroad-button" href="https://gum.co/AWmOs" target="_blank"&gt;FP for Sceptics: Algebraic Data Types&lt;/a&gt;
&lt;/p&gt;&lt;/div&gt;
&lt;hr&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>software design</category><guid>https://last-ent.com/posts/intuitive-map-flatmap/</guid><pubDate>Thu, 19 Nov 2020 18:03:25 GMT</pubDate></item><item><title>FP for Sceptics: Option Type in Practice</title><link>https://last-ent.com/posts/option-type-in-practice/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;previous post&lt;/a&gt; we defined FP &amp;amp; error handling&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;FP promotes using types for error handling&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;Previous post also explained &lt;code&gt;Option&lt;/code&gt; type and how it works.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://last-ent.com/posts/adts-in-practice/"&gt;ADTs in Practice&lt;/a&gt; took a practical system&lt;sup id="fnref:1"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/option-type-in-practice/#fn:1"&gt;1&lt;/a&gt;&lt;/sup&gt; and designed ADTs for it.&lt;/p&gt;
&lt;p&gt;In this post, we will reuse the same system but try to figure out where &lt;code&gt;Option&lt;/code&gt; type makes most sense to use.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Option Type: Where to use it?" src="https://last-ent.com/images/option-practice-title.png"&gt;&lt;/p&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/option-type-in-practice/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/option-type-in-practice/</guid><pubDate>Mon, 29 Jun 2020 16:00:00 GMT</pubDate></item><item><title>FP for Sceptics: Introduction to Option Type</title><link>https://last-ent.com/posts/introduction-to-option-type/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;Functional Programming (FP) is based around mathematical concepts like &lt;strong&gt;Type Theory&lt;/strong&gt; - &lt;em&gt;We define our system in terms of ADTs, data flow &amp;amp; functions&lt;sup id="fnref:0"&gt;&lt;a class="footnote-ref" href="https://last-ent.com/posts/introduction-to-option-type/#fn:0"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;We first implement "Happy Path" and then implement handlers for "Unhappy Path" (error handling). In &lt;a href="https://last-ent.com/posts/adts-in-practice"&gt;&lt;code&gt;ADTs in Practice&lt;/code&gt;&lt;/a&gt; we used "Exceptions" (&lt;code&gt;IO.raiseError&lt;/code&gt;) for error handling.&lt;/p&gt;
&lt;p&gt;However FP promotes using types for error handling, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Option&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Either&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;etc.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In this post we will start by looking at the simplest of these:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Option&lt;/code&gt; type denotes presence (&lt;code&gt;Some(value)&lt;/code&gt;) or absence (&lt;code&gt;None&lt;/code&gt;) of a value.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="Option has Some(value) &amp;amp; None. What are two ways of using it?" src="https://last-ent.com/images/option_title.png"&gt;

&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/introduction-to-option-type/"&gt;Read moreâ¦&lt;/a&gt; (5 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/introduction-to-option-type/</guid><pubDate>Sun, 31 May 2020 22:38:34 GMT</pubDate></item><item><title>FP for Sceptics: ADTs in Practice</title><link>https://last-ent.com/posts/adts-in-practice/</link><dc:creator>Ent</dc:creator><description>&lt;div&gt;&lt;p&gt;In &lt;a href="https://last-ent.com/posts/introduction-to-adts"&gt;previous post&lt;/a&gt; we defined ADTs as&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Algebraic Data Types (or ADTs) model the flow of a program (or a system) in terms of data &amp;amp; functions that describe the complete behaviour and states the data can go through.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In this post, we will work through defining ADTs for an API service.&lt;/p&gt;
&lt;p&gt;&lt;img alt="How to design ADT for a request-response flow?" src="https://last-ent.com/images/adt-server.png"&gt;&lt;/p&gt;
&lt;p&gt;API service will return User's Information by:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Extracting user id &amp;amp; password from the request&lt;/li&gt;
&lt;li&gt;Checks them against an authorization service&lt;/li&gt;
&lt;li&gt;Retrieves User's Information from database&lt;/li&gt;
&lt;li&gt;Returns User Information in response&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/adts-in-practice/"&gt;Read moreâ¦&lt;/a&gt; (4 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/adts-in-practice/</guid><pubDate>Sun, 24 May 2020 15:50:02 GMT</pubDate></item><item><title>FP for Sceptics: Introduction to ADTs (Algebraic Data Types)</title><link>https://last-ent.com/posts/introduction-to-adts/</link><dc:creator>Ent</dc:creator><description>&lt;figure&gt;&lt;img src="https://last-ent.com/images/adt-flow.png"&gt;&lt;/figure&gt; &lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;Algebraic Data Types (or ADTs) model the flow of a program (or a system) in terms of data &amp;amp; functions that describe the complete behaviour and states the data can go through.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let's take an example to grok the concept better.&lt;/p&gt;
&lt;h2&gt;Example: Area of a rectangle&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Calculate the area of a rectangle from a list of positive integers&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Here's a possible algorithm:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Take a list of integers (positive &amp;amp; negative)&lt;/li&gt;
&lt;li&gt;Filter for positive integers ie., remove negative integers&lt;/li&gt;
&lt;li&gt;Create pairs from the filtered list&lt;/li&gt;
&lt;li&gt;Apply equation for area of rectangle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://last-ent.com/posts/introduction-to-adts/"&gt;Read moreâ¦&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><category>FP for sceptics</category><category>functional programming</category><category>programming</category><category>scala</category><category>software design</category><guid>https://last-ent.com/posts/introduction-to-adts/</guid><pubDate>Mon, 13 Apr 2020 22:31:05 GMT</pubDate></item></channel></rss>